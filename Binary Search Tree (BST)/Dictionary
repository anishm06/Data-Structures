#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    char word[50];
    char meaning[100];
    struct Node* left;
    struct Node* right;
};
struct Node* createNode(char* word, char* meaning) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    strcpy(newNode->word, word);
    strcpy(newNode->meaning, meaning);
    newNode->left = newNode->right = NULL;
    return newNode;
}
struct Node* insert(struct Node* root, char* word, char* meaning) {
    if (root == NULL) {
        return createNode(word, meaning); }
    if (strcmp(word, root->word) < 0) {
        root->left = insert(root->left, word, meaning);
    } else if (strcmp(word, root->word) > 0) {
        root->right = insert(root->right, word, meaning);
    }
    return root;
}
struct Node* search(struct Node* root, char* word) {
    if (root == NULL || strcmp(word, root->word) == 0) {
        return root;
    }
    if (strcmp(word, root->word) < 0) {
        return search(root->left, word);
    }
    return search(root->right, word);
}
void inorder(struct Node* root) {
    if (root != NULL) {
        inorder(root->left);
        printf("Word: %s\nMeaning: %s\n\n", root->word, root->meaning);
        inorder(root->right);
    }
}
int main() {
    struct Node* root = NULL;
    int choice;
    char word[50], meaning[100];
    struct Node* result;
    do {
        printf("\nDictionary Menu:\n");
        printf("1. Insert a word\n");
        printf("2. Search for a word\n");
        printf("3. Display all words\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                printf("Enter word: ");
                scanf("%s", word);
                printf("Enter meaning: ");
                getchar();
                fgets(meaning, sizeof(meaning), stdin);
                meaning[strcspn(meaning, "\n")] = '\0';
                root = insert(root, word, meaning);
                printf("Word '%s' added to the dictionary.\n", word);
                break;
            case 2:
                printf("Enter word to search: ");
                scanf("%s", word);
                result = search(root, word);
                if (result != NULL) {
                    printf("Meaning of '%s': %s\n", result->word, result->meaning);
                } else {
                    printf("Word '%s' not found in the dictionary.\n", word);
                }
                break;
            case 3:
                printf("Dictionary contents:\n");
                inorder(root);
                break;
            case 4:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    } while (choice != 4);
    return 0;
}
